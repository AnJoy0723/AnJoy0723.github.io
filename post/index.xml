<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on AnJoy&#39;s Blog</title>
        <link>https://anjoy0723.github.io/post/</link>
        <description>Recent content in Posts on AnJoy&#39;s Blog</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>zh-cn</language>
        <copyright>AnJoy</copyright>
        <lastBuildDate>Sat, 01 Mar 2025 10:35:34 +0800</lastBuildDate><atom:link href="https://anjoy0723.github.io/post/index.xml" rel="self" type="application/rss+xml" /><item>
        <title>Legendary</title>
        <link>https://anjoy0723.github.io/p/legendary/</link>
        <pubDate>Fri, 28 Feb 2025 19:11:27 +0800</pubDate>
        
        <guid>https://anjoy0723.github.io/p/legendary/</guid>
        <description>&lt;p&gt;legendary下载链接：https://github.com/derrod/legendary/releases
命令：
登录账号：legendary auth
查看账号游戏列表：legendary list-games
查看已安装游戏：legendary list-installed
自动同步所有游戏：legendary -y egl-sync
同步云存档：legendary sync-saves
安装游戏：legendary install &amp;ldquo;name&amp;rdquo; &amp;ndash;game-folder 【path】
启动游戏：legendary launch &amp;ldquo;name&amp;rdquo;
更新所有游戏：legendary list-installed &amp;ndash;check-updates
卸载游戏：legendary uninstall &amp;ldquo;name&amp;rdquo;
退出登录：legendary auth &amp;ndash;delete&lt;/p&gt;
</description>
        </item>
        <item>
        <title>Jsp</title>
        <link>https://anjoy0723.github.io/p/jsp/</link>
        <pubDate>Fri, 28 Feb 2025 18:40:29 +0800</pubDate>
        
        <guid>https://anjoy0723.github.io/p/jsp/</guid>
        <description>&lt;h1 id=&#34;一访问请求参数的方法&#34;&gt;一、访问请求参数的方法
&lt;/h1&gt;&lt;p&gt;Java web中进行值传递的方法常用的有三种，分别是：&lt;/p&gt;
&lt;p&gt;使用JSP的forward或include动作，利用传参数子动作实现参数的传递，‘&lt;/p&gt;
&lt;p&gt;在JSP或HTML页面中，利用表单传递参数，&lt;/p&gt;
&lt;p&gt;利用追加在网址后的参数传递或追加在超链接后的参数传递
需注意的是：在上述的三种传参方式中，方式1和方式3属于get类型的参数提交方式，而方式2属于get或post方式的参数提交方式，它可以通过form的method属性进行参数的选择，&lt;/p&gt;
&lt;p&gt;get请求与post请求的不同之处是前者参数会显示在地址栏。&lt;/p&gt;
&lt;p&gt;GET请求：
GET方法将请求的编码信息添加在网址后面，网址与编码信息通过&amp;quot;?&amp;ldquo;号分隔。如下所示：&lt;/p&gt;
&lt;p&gt;&lt;a class=&#34;link&#34; href=&#34;http://www.runoob.com/hello?key1=value1&amp;amp;key2=value2&#34;  target=&#34;_blank&#34; rel=&#34;noopener&#34;
    &gt;http://www.runoob.com/hello?key1=value1&amp;key2=value2&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GET方法是浏览器默认传递参数的方法，一些敏感信息，如密码等建议不使用GET方法。&lt;/p&gt;
&lt;p&gt;用get时，传输数据的大小有限制 （注意不是参数的个数有限制），最大为1024字节。&lt;/p&gt;
&lt;p&gt;POST请求：
一些敏感信息，如密码等我们可以通过POST方法传递，POST提交数据是隐式的。&lt;/p&gt;
&lt;p&gt;POST提交数据是不可见的，GET是通过在url里面传递的（可以看一下你浏览器的地址栏）。&lt;/p&gt;
&lt;p&gt;JSP使用getParameter()来获得传递的参数，getInputStream()方法用来处理客户端的二进制数据流的请求。&lt;/p&gt;
&lt;p&gt;同时，request对象的getParameter()方法可以接收不同的来自于JSP页面或JSP动作传递给request对象的参数信息。该方法的使用格式如下：&lt;/p&gt;
&lt;p&gt;String 字符串变量 = request.getParameter(&amp;ldquo;客户端提供参数的name属性名&amp;rdquo;);&lt;/p&gt;
&lt;p&gt;其中需要注意的是：参数name与客户端提供参数的name属性名应该相同，同时request对象的getParameter()方法返回的是string类型的参数，如果参数name的值不存在，则会返回空值null&lt;/p&gt;
&lt;h1 id=&#34;二form表单传参&#34;&gt;二、form表单传参
&lt;/h1&gt;&lt;p&gt;表单界面代码：&lt;/p&gt;
&lt;body&gt;
    &lt;form action=&#34;myjsp.jsp&#34; method=&#34;post&#34;&gt;
     姓名：&lt;input type=&#34;text&#34; name=&#34;name&#34;&gt;&lt;br&gt;
     电话：&lt;input type=&#34;text&#34; name=&#34;tel&#34;&gt;&lt;br&gt;
     &lt;input type=&#34;submit&#34; value=&#34;提交&#34;&gt;
     &lt;/form&gt;
&lt;/body&gt;
&lt;p&gt;接收界面代码：&lt;/p&gt;
 &lt;body&gt;
&lt;% String name = request.getParameter(&#34;name&#34;);
    String tel = request.getParameter(&#34;tel&#34;);
     %&gt;
     &lt;font facr=&#34;楷体&#34; size=5&gt;
     获取到的信息是：&lt;br&gt;
     姓名：&lt;%=name %&gt;
     电话：&lt;%=tel %&gt;
     &lt;/font&gt;
&lt;/body&gt;
&lt;h2 id=&#34;中文乱码解决&#34;&gt;中文乱码解决：
&lt;/h2&gt;&lt;p&gt;1、在接收界面的代码中，在获取参数值之前增加如下代码：
&lt;strong&gt;request.setCharacterEncoding(&amp;ldquo;utf-8&amp;rdquo;);&lt;/strong&gt;
&lt;strong&gt;2、在提交表单的action后的method属性需设置为“post”。&lt;/strong&gt;&lt;/p&gt;
 &lt;body&gt;
    &lt;%
    request.setCharacterEncoding(&#34;utf-8&#34;);
    String name = request.getParameter(&#34;name&#34;);
    String tel = request.getParameter(&#34;tel&#34;);
     %&gt;
     &lt;font facr=&#34;楷体&#34; size=5&gt;
     获取到的信息是：&lt;br&gt;
     姓名：&lt;%=name %&gt;
     电话：&lt;%=tel %&gt;
     &lt;/font&gt;
  &lt;/body&gt;
  **3、在传递过来的中文参数中存在乱码问题，原因是中文参数采用了页面原有的“ISO-8859-1”编码，因此我们可能需要将传递过来的参数的编码格式修改为“UTF-8”格式，格式转换的代码如下：**
  String name = new String(request.getParameter(&#34;name&#34;).getBytes(&#34;ISO-8859-1&#34;),&#34;UTF-8&#34;);
&lt;p&gt;三、网址或超链接传参
利用网址或超链接传参的格式如下：
&amp;lt;a href=”超链接或网址?参数名1=参数值1&amp;amp;参数名2=参数值2&amp;hellip;.”&amp;gt;点击跳转&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;传值界面代码：&lt;/p&gt;
 &lt;body&gt;
   &lt;a href=&#34;myjsp.jsp?name=zhangsan&amp;tel=123456&#34;&gt;点击传值&lt;/a&gt;
 &lt;/body&gt;
 接收界面代码：
  &lt;body&gt;
&lt;%
    String name = request.getParameter(&#34;name&#34;);
    String tel = request.getParameter(&#34;tel&#34;);
     %&gt;
     &lt;font facr=&#34;楷体&#34; size=5&gt;
     获取到的信息是：&lt;br&gt;
     姓名：&lt;%=name %&gt;
     电话：&lt;%=tel %&gt;
     &lt;/font&gt;
  &lt;/body&gt;
&lt;p&gt;中文错误解决：
原因是因为在超链接或网址传参中，参数属于网址的一部分，同时这一部分是属于URL编码的，不支持中文的utf-8，因此在传递中文时会显示网址错误，解决办法是将我们要传递的中文转成URL编码即可：
java.net.URLEncoder.encode(&amp;ldquo;中文&amp;rdquo;,&amp;ldquo;utf-8&amp;rdquo;)将中文转换成URL编码
提交界面代码：&lt;/p&gt;
&lt;body&gt;
   &lt;a href=&#34;myjsp.jsp?name=&lt;%=java.net.URLEncoder.encode(&#34;张三&#34;,&#34;utf-8&#34;) %&gt;&amp;tel=123456&#34;&gt;点击传值&lt;/a&gt;
  &lt;/body&gt;
&lt;p&gt;四、JSP子动作传参
使用JSP的forward或include动作，利用传参数子动作实现参数的传递的方式，较其他两种方式有所不同，在该方式中用户可以根据需要在request对象中添加属性，然后在另一个JSP程序中获取到添加的数据，&lt;/p&gt;
&lt;p&gt;1、page范围
pageContext:只在一个页面中保存属性，跳转之后失效。
2、request范围
request：只在一个请求中保存，服务跳转后依然有效。
3、session范围
session:在一次会话范围内，无论何种跳转都可以使用。
4、application范围
application:在整个服务器上保存。&lt;/p&gt;
&lt;p&gt;具体的使用方法如下：
在传值页面使用request对象的setAttribute(“name”,obj)方法，可以把数据设定在request范围内，设置数据的方法格式为：
void request.setAttribute(“key”,object);
其中key为键，string类型，是要保存的数值的属性名。Object是要保存的参数值，属于object类型，
使用上面的方法在传值页面进行请求转发之后，在接收页面使用getAttribute(“name”)方法就可以获取到name属性下的值，获取数据的方法格式如下：
Object request.getAttribute(string name);
其中的参数name表示键名，与setAttribute(“name”,obj)方法中的name相对应，获取的参数类型由obj的类型决定。&lt;/p&gt;
&lt;p&gt;参数传递界面代码：
&amp;lt;%
//设置page范围的域对象
pageContext.setAttribute(&amp;ldquo;name1&amp;rdquo;, &amp;ldquo;zhangSan&amp;rdquo;);
//设置request范围的域对象
request.setAttribute(&amp;ldquo;name2&amp;rdquo;, &amp;ldquo;liSi&amp;rdquo;);
//设置session范围的域对象
session.setAttribute(&amp;ldquo;name3&amp;rdquo;, &amp;ldquo;wangWu&amp;rdquo;);
//设置application范围的域对象
application.setAttribute(&amp;ldquo;name4&amp;rdquo;, &amp;ldquo;zhaoLiu&amp;rdquo;);&lt;/p&gt;
&lt;p&gt;//获取域对象中的值
out.print(&amp;ldquo;page范围:&amp;quot;+pageContext.getAttribute(&amp;ldquo;name1&amp;rdquo;)+&amp;quot;    &amp;rdquo;);
out.print(&amp;ldquo;request范围:&amp;quot;+request.getAttribute(&amp;ldquo;name1&amp;rdquo;)+&amp;quot;    &amp;rdquo;);
out.print(&amp;ldquo;session范围:&amp;quot;+session.getAttribute(&amp;ldquo;name1&amp;rdquo;)+&amp;quot;    &amp;rdquo;);
out.print(&amp;ldquo;application范围:&amp;quot;+application.getAttribute(&amp;ldquo;name1&amp;rdquo;)+&amp;quot;    &amp;rdquo;);
%&amp;gt;&lt;/p&gt;
&lt;p&gt;中文乱码解决
&lt;strong&gt;要在页面的最前端将整个页面的编码设置为“UTF-8”或“GBK”的编码格式，&lt;/strong&gt;
&amp;lt;%@ page language=&amp;ldquo;java&amp;rdquo; contentType=&amp;ldquo;text/html; charset=GBK&amp;rdquo;&lt;/p&gt;
&lt;p&gt;pageEncoding=&amp;ldquo;GBK&amp;rdquo;%&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;%@ page language=&amp;ldquo;java&amp;rdquo; contentType=&amp;ldquo;text/html; charset=UTF－８&amp;rdquo;&lt;/p&gt;
&lt;p&gt;pageEncoding=&amp;ldquo;UTF－８&amp;rdquo;%&amp;gt;&lt;/p&gt;
</description>
        </item>
        
    </channel>
</rss>
