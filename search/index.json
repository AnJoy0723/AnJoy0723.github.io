[{"content":"创建文章 1 hugo new post/xxx/xxx.md 预览网站 1 2 hugo server -D hugo server 两者都是用于启动 Hugo 本地开发服务器的命令，区别主要在于是否包含草稿文章方面：\nhugo server：启动一个本地开发服务器，该服务器会对项目文件的变更进行监控，一旦文件有改动，就会实时重新生成网站。不过，在生成网站内容时，它默认不会包含草稿文章。 hugo server -D：-D 是 --buildDrafts 的简写。样会启动本地开发服务器，实现对文件变更的监控和网站的实时更新与刷新。不同的是，在生成网站时会将草稿文章也包含进去。 清楚缓存 1 2 3 hugo --gc hugo --gc --minify hugo server --gc -D 当预览修改文章时，发现页面没变化，可以尝试清除缓存并重新构建：\nhugo --gc：--gc 标志的作用是在构建过程中执行垃圾回收（Garbage Collection），即清除不再使用的缓存文件，这样能释放磁盘空间。如果对网站配置或内容进行了大量修改，旧的缓存不再使用，该命令能保证生成的网站是最新状态。 hugo --gc --minify：除了具备执行垃圾回收功能外，--minify 标志还会对生成的 HTML、CSS、JavaScript 等文件进行压缩。可以减小文件大小，从而提升网站的加载速度。适合在准备将网站部署到生产环境时使用，能提供更流畅的访问体验。 hugo server --gc -D：启动一个实时预览服务器，同时执行垃圾回收，确保使用的是最新的缓存。适合在开发过程中使用，当频繁修改文章内容，并希望随时预览草稿文章在内的网站效果时最方便。 发布文章 1 2 3 4 5 git init git add . git commit -m \u0026#34;xxx\u0026#34; git remote add origin {github仓库地址} git push -u origin main git init：初始化一个新的 Git 仓库，会将当前目录变为一个Git仓库。并生成一个名为 .git 的隐藏目录，包含了 Git 管理项目所需的各种配置文件和数据结构。 git add .：用于把文件的修改添加到暂存区。可以在暂存区（Git中的一个中间区域）组织和规划哪些修改要包含在下次提交中。. 代表当前目录下的所有文件和子目录。 git commit -m \u0026quot;xxx\u0026quot;：用于将暂存区的修改保存到本地仓库的历史记录中，-m 标志后面跟着的 \u0026quot;xxx\u0026quot; 是本次提交的说明信息。 git remote add origin xxx：用于管理与远程仓库（一般是GitHub创建的远仓）的连接。add 子命令用于添加一个新的远程仓库。origin 是远程仓库的默认名。这会将本地仓库与该 GitHub 仓库建立连接。 git push -u origin main：用于将本地仓库的提交推送到远程仓库。-u会将本地的 main 分支与远程仓库的 main 分支关联起来，这样在后续的推送操作中，你只需要执行 git push 即可。origin 是远程仓库的别名，main 是要推送的本地分支名称。 1 2 git push git push -u origin main git push -u origin main：除了将本地的 main 分支推送到远程 origin 仓库的 main 分支外，还会建立本地 main 分支和远程 origin/main 分支的关联。建立关联后，后续使用 git push 或 git pull 时，Git 会知道默认操作的远程分支。通常在首次将本地分支推送到远程仓库时使用，这样后续无需每次都指定远程仓库和分支。 git push：如果本地分支已经和远程分支建立了关联，使用该命令可以简化操作，快速将本地更新推送到远程。适合在本地分支和远程分支已经建立关联的情况下。 其他 1 git remote -v 查看本地仓库与哪些远程仓库进行了连接的命令。执行该命令后，会列出本地仓库所关联的所有远程仓库的别名以及对应的远程仓库的 URL 地址。这里会展示 fetch（拉取）和 push（推送）对应的地址，一般情况下二者是相同的。\n1 hugo version 查看hugo版本\n","date":"2025-10-27T16:47:44+08:00","permalink":"https://anjoy0723.github.io/p/hugo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"Hugo常用命令"},{"content":"DAY 1 今天开始正式学习PFC软件，浅浅记录一下，看得头疼。。\n","date":"2025-10-27T16:46:25+08:00","permalink":"https://anjoy0723.github.io/p/pfc%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/","title":"PFC学习记录"},{"content":"Codex接入Kimi K2/GLM-4.5 环境配置指南 (Windows/macOS/Ubuntu) 1. 安装 Node.js 在开始之前，您的系统需要安装好 Node.js。\n下载与安装：请前往 Node.js 官方网站 下载并安装最新版本的 Node.js（建议使用 v18 或更高版本）。根据您的操作系统下载对应的安装包。 验证安装：安装完成后，打开您的终端（Terminal）或命令提示符（CMD），运行以下命令来验证。 1 node -v 2. 安装Codex 2.1 Windows 1.以 管理员身份 打开您的 命令提示符（CMD） 或 PowerShell。 2.输入并运行以下安装命令：\n1 npm install -g @openai/codex 2.2 macOS / Ubuntu 1.打开您的 终端（Terminal）。 2.由于全局安装 npm 包需要系统权限，您需要在命令前加上 sudo。 3.输入并运行以下安装命令（过程中会提示您输入电脑的登录密码）：\n1 sudo npm install -g @openai/codex 2.3 验证安装 (所有系统通用) 安装完成后，在 新的终端窗口 中运行以下命令来验证。\n1 codex --version 如果终端成功返回版本号，则代表 Codex 已成功安装\n3.获取API KEY 3.1 获取 GLM-4.5 API Key 前往 智谱AI开放平台。 创建账号并登录，系统会赠送 2000 万 token 供你试用。或者选择月卡订阅，日常开发足够。后续考虑升级成季度订阅 登录后按顺序点击：右上角的头像 → API key → 添加新的 API key → 输入一个名字来标识这个 key → 确定。 申请成功后点击一下 API key 的复制按钮，把 key 复制到剪贴板中给后续使用。 3.2 获取 Kimi K2 API Key 前往 Moonshot AI开放平台。 注册与登录：如果您没有账户，请先注册一个新账户并登录。 创建 API Key：在平台仪表盘中，找到创建 API Key 的选项。 重要提示：API Key 在创建后只会显示一次，请务必立即复制并妥善保存。 关于费用： 新用户通常会获赠少量免费额度（例如 15 元）供测试使用。 若要长期或高频率使用，建议充值至少 50元，以解锁更高的请求速率（RPM），从而获得更流畅的体验。\n4.配置环境变量 4.1 Windows 您可以选择以下任一方法进行配置： 方法一：使用命令提示符 打开命令提示符（无需管理员），并执行以下两条命令。请确保将 \u0026ldquo;你的GLM_API_Key\u0026rdquo;、\u0026ldquo;你的Kimi_API_Key\u0026rdquo; 替换为您真实的 API Key。替换后重启一下终端。\n1 2 setx GLM_API_KEY \u0026#34;你的GLM_API_Key\u0026#34; setx KIMI_API_KEY \u0026#34;你的Kimi_API_Key\u0026#34; 注意：使用 setx 设置的变量需要 重启终端 才会生效。建议关闭所有终端，然后再打开一个新的。 方法二：使用系统属性面板 在 Windows 搜索栏中输入\u0026quot;环境变量\u0026quot;，并选择\u0026quot;编辑系统环境变量\u0026quot;。 在\u0026quot;系统属性\u0026quot;窗口中，点击\u0026quot;环境变量\u0026hellip;\u0026quot;。 在\u0026quot;系统变量\u0026quot;区域，点击\u0026quot;新建\u0026hellip;\u0026quot;，并添加两个新变量。 4.2 macOS / Ubuntu 在 macOS 和 Ubuntu 系统中，环境变量通常配置在 Shell 的配置文件中。 1.确定您的 Shell 类型 在终端中运行 echo $SHELL。 如果输出包含 zsh，您的配置文件是 ~/.zshrc。 如果输出包含 bash，您的配置文件是 ~/.bashrc。 2.编辑配置文件 使用您喜欢的文本编辑器打开对应的文件。这里以 nano 为例（一个对新手友好的终端编辑器）。\n1 2 3 4 5 # 如果您使用 Zsh (macOS 默认) nano ~/.zshrc # 如果您使用 Bash nano ~/.bashrc 3.添加环境变量 在文件的末尾，添加以下两行。请将 你的GLM_API_Key 和 你的Kimi_API_Key 替换为您真实的 API Key。\n1 2 export GLM_API_KEY=\u0026#34;你的GLM_API_Key\u0026#34; export KIMI_API_KEY=\u0026#34;你的Kimi_API_Key\u0026#34; 添加后，按下 Ctrl + O 保存文件，然后按 Ctrl + X 退出编辑器。 4.使配置生效 运行以下命令让配置立即生效（或直接重启终端）。\n1 2 3 4 5 # 如果您修改了 .zshrc source ~/.zshrc # 如果您修改了 .bashrc source ~/.bashrc 5.运行并配置 Codex 好，到此所有准备工作已经完成！让我们启动 Codex 吧！ 打开一个新的终端窗口。 输入 codex 命令，你会看到让你选择登录方式，我们这里需要按方向键切换到 2. Provide your own API key，回车确认：\n1 codex 紧接着让你输入 API Key，注意这里是输入的 GPT 官方的 API Key，我们胡乱输一个确认即可。 然后打开 ~/.codex/config.toml 文件（Windows 在C:\\Users\\你的用户名.codex\\config.toml），这里我使用 VSCode 来打开并编辑，直接复制粘贴以下内容并保存。这里我使用 GLM-4.5 的模型，你要用 Kimi 的话就把 glm 注释掉，然后把 Kimi 打开：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 model_provider = \u0026#34;glm\u0026#34; model = \u0026#34;glm-4.5\u0026#34; # model_provider = \u0026#34;kimi\u0026#34; # model = \u0026#34;kimi-k2-0905-preview\u0026#34; [model_providers.glm] name = \u0026#34;zai\u0026#34; base_url = \u0026#34;https://open.bigmodel.cn/api/coding/paas/v4\u0026#34; env_key = \u0026#34;GLM_API_KEY\u0026#34; [model_providers.kimi] name = \u0026#34;kimi\u0026#34; base_url = \u0026#34;https://api.moonshot.cn/v1\u0026#34; env_key = \u0026#34;KIMI_API_KEY\u0026#34; 接着退出 Codex，重新进入一下，即可使用Codex。\n","date":"2025-10-14T14:25:06+08:00","permalink":"https://anjoy0723.github.io/p/codex%E6%8E%A5%E5%85%A5%E7%AC%AC%E4%B8%89%E6%96%B9key/","title":"Codex接入第三方key"},{"content":"Git 是一个版本控制系统，允许开发人员跟踪其代码随时间的变化。它允许多个人同时处理同一个代码库，并且如果出现问题，可以轻松恢复到以前的代码版本。\n一、版本检查 要检查系统上安装的 Git 版本，可以在终端或命令提示符中使用以下命令：\n1 git --version 这将显示当前安装在系统上的 Git 的版本号。例如，输出可能如下所示：\n1 git version 2.39.2 二、配置 要在本地配置 Git，需要设置一些基本属性，以标识你是在 Git 中所做更改的作者。以下是在本地配置 Git 的步骤：\n1.设置用户名 1 git config --global user.name \u0026#34;Your Name\u0026#34; 2.设置用户邮箱 1 git config --global user.email \u0026#34;your-email@example.com\u0026#34; 3.设置常用的文本编辑器 1 git config --global core.editor \u0026#34;editor-of-your-choice\u0026#34; eg:将首选文本编辑器设置为Nano:\n1 git config --global core.editor nano 4.检查git配置 1 git config --list 如何启动git存储库 1.初始化git存储库 1 2 cd \u0026lt;directory\u0026gt; git init 2.暂存并提交更改 1 2 3 git add \u0026lt;file\u0026gt; # 添加指定文件 git add . # 添加所有更改 git commit -m \u0026#34;Your commit message\u0026#34; file 为需要暂存的文件 Your commit message:具体的更改信息\n3.连接远程仓库 1 git remote add origin \u0026lt;repository-url\u0026gt; 4.推送到远程仓库 1 git push origin \u0026lt;branch\u0026gt; branch 为远程仓库分支\n三、常用Git命令 功能 命令 查看状态 git status 查看提交历史 git log 或 git log --oneline 查看差异 git diff 创建分支 git branch \u0026lt;branch-name\u0026gt; 切换分支 git checkout \u0026lt;branch-name\u0026gt; 或 git switch \u0026lt;branch-name\u0026gt; 合并分支 git merge \u0026lt;branch-name\u0026gt; 拉取远程更新 git pull origin \u0026lt;branch-name\u0026gt; 克隆仓库 git clone \u0026lt;repository-url\u0026gt; 回退版本 git reset --hard \u0026lt;commit-id\u0026gt; 查看分支列表 git branch -a 删除分支 git branch -d \u0026lt;branch-name\u0026gt; ","date":"2025-08-21T10:25:27+08:00","permalink":"https://anjoy0723.github.io/p/git-%E4%BD%BF%E7%94%A8%E8%AF%B4%E6%98%8E%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","title":"Git 使用说明及常用命令"},{"content":"相关信息 1 2 3 4 5 6 7 8 yarn : 无法加载文件 C:\\Users\\Administrator\\AppData\\Roaming\\npm\\yarn.ps1，因为在此系统上禁止运行脚本。有关详细信息，请参阅 https:/go .microsoft.com/fwlink/?LinkID=135170 中的 about_Execution_Policies。 所在位置 行:1 字符: 1 + yarn + ~~~~ + CategoryInfo : SecurityError: (:) []，PSSecurityException + FullyQualifiedErrorId : UnauthorizedAccess 错误信息：\n错误信息 解决办法 用管理员身份运行 PowerShell，然后输入\n1 set-executionpolicy remotesigned 再输入y确认即可\nPowerShell ","date":"2025-08-16T22:02:23+08:00","permalink":"https://anjoy0723.github.io/p/%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3vscode%E7%BB%88%E7%AB%AF%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8xx%E8%84%9A%E6%9C%AC%E6%8A%A5%E9%94%99/","title":"如何解决vscode终端无法使用XX脚本报错"},{"content":"","date":"2025-04-13T18:33:48+08:00","image":"https://anjoy0723.github.io/p/%E6%9C%88%E5%A7%AC-tsukihime/logo_hu_41a12fc85ed0168a.png","permalink":"https://anjoy0723.github.io/p/%E6%9C%88%E5%A7%AC-tsukihime/","title":"月姬 Tsukihime"},{"content":"设置-颜色-打开 透明效果； 打开注册表，找到路径： 1 计算机\\\\HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced 右侧找到名称 TaskbarAcrylicOpacity，如果没有，就右键新建一个DWORD（32位）值D； 将值修改为十进制0就是全透明，也可以是十进制0-10之间的效果。 不用重启电脑，任务管理器重启windows资源管理器就行。 实际效果展示：\n实际效果演示 ","date":"2025-04-11T16:12:04+08:00","image":"https://anjoy0723.github.io/p/win10%E9%80%8F%E6%98%8E%E4%BB%BB%E5%8A%A1%E6%A0%8F/bg_hu_e95a4276bf860a84.jpg","permalink":"https://anjoy0723.github.io/p/win10%E9%80%8F%E6%98%8E%E4%BB%BB%E5%8A%A1%E6%A0%8F/","title":"win10透明任务栏"},{"content":" ","date":"2025-03-17T16:12:04+08:00","permalink":"https://anjoy0723.github.io/p/2048/","title":"2048"},{"content":" ","date":"2025-03-17T16:12:04+08:00","permalink":"https://anjoy0723.github.io/p/%E7%94%B5%E5%AD%90%E6%9C%A8%E9%B1%BC/","title":"电子木鱼"},{"content":" 1 2 3 4 links: - title: 可以成为我的恋人吗 description: 一个简易表白网站 website: https://anjoy0723.github.io/pages/love/index.html ","date":"2025-03-17T16:12:04+08:00","permalink":"https://anjoy0723.github.io/p/%E5%8F%AF%E4%BB%A5%E6%88%90%E4%B8%BA%E6%88%91%E7%9A%84%E6%81%8B%E4%BA%BA%E5%90%97/","title":"可以成为我的恋人吗？"},{"content":" ","date":"2025-03-17T16:12:04+08:00","permalink":"https://anjoy0723.github.io/p/%E8%B4%AA%E5%90%83%E8%9B%87%E7%BD%91%E9%A1%B5%E7%89%88/","title":"贪吃蛇网页版"},{"content":"legendary下载链接：\nhttps://github.com/derrod/legendary/releases 命令： 登录账号：legendary auth 查看账号游戏列表：legendary list-games 查看已安装游戏：legendary list-installed 自动同步所有游戏：legendary -y egl-sync 同步云存档：legendary sync-saves 安装游戏：legendary install \u0026ldquo;name\u0026rdquo; \u0026ndash;game-folder 【path】 启动游戏：legendary launch \u0026ldquo;name\u0026rdquo; 更新所有游戏：legendary list-installed \u0026ndash;check-updates 卸载游戏：legendary uninstall \u0026ldquo;name\u0026rdquo; 退出登录：legendary auth \u0026ndash;delete ","date":"2025-02-28T19:11:27+08:00","permalink":"https://anjoy0723.github.io/p/legendary/","title":"Legendary"},{"content":"一、访问请求参数的方法 Java web中进行值传递的方法常用的有三种，分别是：\n使用JSP的forward或include动作，利用传参数子动作实现参数的传递，‘\n在JSP或HTML页面中，利用表单传递参数，\n利用追加在网址后的参数传递或追加在超链接后的参数传递 需注意的是：在上述的三种传参方式中，方式1和方式3属于get类型的参数提交方式，而方式2属于get或post方式的参数提交方式，它可以通过form的method属性进行参数的选择，\nget请求与post请求的不同之处是前者参数会显示在地址栏。\nGET请求： GET方法将请求的编码信息添加在网址后面，网址与编码信息通过\u0026quot;?\u0026ldquo;号分隔。如下所示：\nhttp://www.runoob.com/hello?key1=value1\u0026key2=value2\nGET方法是浏览器默认传递参数的方法，一些敏感信息，如密码等建议不使用GET方法。\n用get时，传输数据的大小有限制 （注意不是参数的个数有限制），最大为1024字节。\nPOST请求： 一些敏感信息，如密码等我们可以通过POST方法传递，POST提交数据是隐式的。\nPOST提交数据是不可见的，GET是通过在url里面传递的（可以看一下你浏览器的地址栏）。\nJSP使用getParameter()来获得传递的参数，getInputStream()方法用来处理客户端的二进制数据流的请求。\n同时，request对象的getParameter()方法可以接收不同的来自于JSP页面或JSP动作传递给request对象的参数信息。该方法的使用格式如下：\nString 字符串变量 = request.getParameter(\u0026ldquo;客户端提供参数的name属性名\u0026rdquo;);\n其中需要注意的是：参数name与客户端提供参数的name属性名应该相同，同时request对象的getParameter()方法返回的是string类型的参数，如果参数name的值不存在，则会返回空值null\n二、form表单传参 表单界面代码：\n姓名：\n电话：\n接收界面代码：\n\u003c% String name = request.getParameter(\"name\"); String tel = request.getParameter(\"tel\"); %\u003e 获取到的信息是：\n姓名：\u003c%=name %\u003e 电话：\u003c%=tel %\u003e 中文乱码解决： 1、在接收界面的代码中，在获取参数值之前增加如下代码： request.setCharacterEncoding(\u0026ldquo;utf-8\u0026rdquo;); 2、在提交表单的action后的method属性需设置为“post”。\n\u003c% request.setCharacterEncoding(\"utf-8\"); String name = request.getParameter(\"name\"); String tel = request.getParameter(\"tel\"); %\u003e 获取到的信息是：\n姓名：\u003c%=name %\u003e 电话：\u003c%=tel %\u003e **3、在传递过来的中文参数中存在乱码问题，原因是中文参数采用了页面原有的“ISO-8859-1”编码，因此我们可能需要将传递过来的参数的编码格式修改为“UTF-8”格式，格式转换的代码如下：** String name = new String(request.getParameter(\"name\").getBytes(\"ISO-8859-1\"),\"UTF-8\"); 三、网址或超链接传参 利用网址或超链接传参的格式如下： \u0026lt;a href=”超链接或网址?参数名1=参数值1\u0026amp;参数名2=参数值2\u0026hellip;.”\u0026gt;点击跳转\n传值界面代码：\n点击传值 接收界面代码： \u003c% String name = request.getParameter(\"name\"); String tel = request.getParameter(\"tel\"); %\u003e 获取到的信息是：\n姓名：\u003c%=name %\u003e 电话：\u003c%=tel %\u003e 中文错误解决： 原因是因为在超链接或网址传参中，参数属于网址的一部分，同时这一部分是属于URL编码的，不支持中文的utf-8，因此在传递中文时会显示网址错误，解决办法是将我们要传递的中文转成URL编码即可： java.net.URLEncoder.encode(\u0026ldquo;中文\u0026rdquo;,\u0026ldquo;utf-8\u0026rdquo;)将中文转换成URL编码 提交界面代码：\n","date":"2025-02-28T18:40:29+08:00","permalink":"https://anjoy0723.github.io/p/jsp/","title":"Jsp"}]